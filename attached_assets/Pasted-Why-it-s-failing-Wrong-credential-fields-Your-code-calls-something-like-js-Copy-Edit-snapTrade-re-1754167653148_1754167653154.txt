Why it’s failing
Wrong credential fields

Your code calls something like:

js
Copy
Edit
snapTrade.registerOrLogin({ clientId, userId: email, userSecret: process.env.SNAPTRADE_CLIENT_SECRET })
but SnapTrade expects:

userId to be the SDK-generated userId (e.g. flint_<numeric>_<timestamp>) returned by the register call, not the raw email.

userSecret to be the SDK-generated secret you received from the same register call—again, not the static SNAPTRADE_CLIENT_SECRET from your .env.

Mixing up “clientSecret” vs “consumerKey”

The SnapTrade Node SDK’s initializer takes { clientId, consumerKey }. You’ve named your env var CLIENT_SECRET, but SnapTrade calls it consumerKey. If you feed it under the wrong parameter name, the SDK won’t sign requests correctly.

Signature mismatch (code 1076)

The SDK is HMAC-signing each request with your consumerKey + timestamp + payload. If those values aren’t passed exactly as expected—wrong key, wrong field name, or even an extra slash in the URL—it fails verification.

Credential validation (code 1083)

Once the signature passes, SnapTrade looks up the userId + userSecret combination in their database. If those don’t match what the user registered with, you get “Invalid userID or userSecret.”

How to fix it
A. Correct your register/login flow
Register or login once

js
Copy
Edit
// server/routes/snaptrade.ts
const { userId, userSecret } = await snapTrade.registerOrLogin({
  clientId: process.env.SNAPTRADE_CLIENT_ID,
  consumerKey: process.env.SNAPTRADE_CONSUMER_KEY
});
// persist BOTH userId & userSecret to your database—never re-use the static env var for userSecret
Use the returned creds for all subsequent calls

js
Copy
Edit
// when fetching accounts or holdings:
await snapTrade.getAccounts({
  clientId: process.env.SNAPTRADE_CLIENT_ID,
  userId: dbRecord.userId,        // from your DB
  userSecret: dbRecord.userSecret // from your DB
});
B. Rename & wire up your env vars correctly
In .env and .env.example:

text
Copy
Edit
SNAPTRADE_CLIENT_ID=FLINT-AGFQD
SNAPTRADE_CONSUMER_KEY=eJunn…    # 50-character key from SnapTrade
In code, initialize the SDK with:

js
Copy
Edit
new SnapTrade({
  clientId: process.env.SNAPTRADE_CLIENT_ID,
  consumerKey: process.env.SNAPTRADE_CONSUMER_KEY
});
C. Improve error handling so your UI never 500s
Wrap every SDK call:

js
Copy
Edit
try {
  const accounts = await snapTrade.getAccounts({ … });
  res.json({ accounts });
} catch (err) {
  console.error("SnapTrade API error", err);
  // return a graceful empty state instead of throwing
  res.status(200).json({ accounts: [] });
}
And in /api/holdings:

js
Copy
Edit
try {
  const positions = await snapTrade.getPositions({ … });
  res.json({ holdings: positions });
} catch {
  res.status(200).json({ holdings: [] });
}
Recap
Signature errors (1076) = your consumerKey wasn’t passed correctly or was the wrong value.

Credential errors (1083) = you’re still using the static env var as userSecret instead of the per-user secret returned by the SDK.

500 errors on /api/holdings = you propagate those SnapTrade errors instead of falling back to an empty result.