2) BACKEND â€” make sure userSecret is persisted and loaded
If not added yet: file-based store (works immediately on Replit)
src/store/snapUserStore.ts

ts
Copy
Edit
import fs from 'fs';
import path from 'path';

const DATA_DIR = path.join(process.cwd(), 'data');
const FILE = path.join(DATA_DIR, 'snaptrade-users.json');

type Rec = { userId: string; snaptrade_user_secret: string };
type DB = Record<string, Rec>;

function ensureFile() {
  if (!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR, { recursive: true });
  if (!fs.existsSync(FILE)) fs.writeFileSync(FILE, JSON.stringify({}), 'utf8');
}
function readDB(): DB {
  ensureFile();
  try { return JSON.parse(fs.readFileSync(FILE, 'utf8')) as DB; } catch { return {}; }
}
function writeDB(db: DB) { fs.writeFileSync(FILE, JSON.stringify(db, null, 2), 'utf8'); }

export async function getSnapUserByEmail(userId: string): Promise<Rec | null> {
  const db = readDB();
  return db[userId.toLowerCase()] || null;
}
export async function upsertSnapUserSecret(userId: string, secret: string): Promise<void> {
  const db = readDB();
  db[userId.toLowerCase()] = { userId: userId.toLowerCase(), snaptrade_user_secret: secret };
  writeDB(db);
}
Secret generator src/lib/crypto.ts

ts
Copy
Edit
import { randomBytes } from 'crypto';
export const generateUserSecret = () => randomBytes(32).toString('hex');
SnapTrade config src/lib/snaptrade.ts (ensure it logs at boot)

ts
Copy
Edit
import * as Snaptrade from 'snaptrade-typescript-sdk';
const env = process.env.SNAPTRADE_ENV || 'sandbox';
const clientId = process.env.SNAPTRADE_CLIENT_ID;
const consumerKey = process.env.SNAPTRADE_CONSUMER_KEY;

console.log('[SnapTrade] SDK init', {
  env,
  clientIdTail: clientId?.slice(-6),
  consumerKeyLen: consumerKey?.length,
});

export const snaptradeConfig = new Snaptrade.Configuration({
  consumerKey: consumerKey!,
  clientId: clientId!,
  environment: env as any,
});
export const authApi = new Snaptrade.AuthenticationApi(snaptradeConfig);
export const accountsApi = new Snaptrade.AccountsApi(snaptradeConfig);
export const portfoliosApi = new Snaptrade.PortfolioApi(snaptradeConfig);
export const ordersApi = new Snaptrade.TradeApi(snaptradeConfig);