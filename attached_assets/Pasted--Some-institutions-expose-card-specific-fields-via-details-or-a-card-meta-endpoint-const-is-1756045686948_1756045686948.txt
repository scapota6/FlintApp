  // Some institutions expose card-specific fields via details or a card meta endpoint:
    const isCard = (account.subtype || "").toLowerCase() === "credit_card";
    const cardMeta = isCard ? await teller.creditCards?.get?.(tellerAccId).catch(() => null) : null;

    return res.json({
      accountOverview: {
        tellerAccountId: account.id,
        institution: account.institution?.name,
        name: account.name,
        type: account.type,
        subtype: account.subtype,
        currency: account.currency,
        mask: account.mask,
      },
      // CREDIT CARD: show due dates & payments first
      paymentsAndDueDates: isCard ? {
        paymentDueDate: cardMeta?.payment_due_date ?? balances?.payment_due_date ?? null,
        minimumPaymentDue: cardMeta?.minimum_payment_due ?? balances?.minimum_payment_due ?? null,
        statementBalance: balances?.statement ?? null,
        lastPaymentAmount: cardMeta?.last_payment_amount ?? null,
        lastPaymentDate: cardMeta?.last_payment_date ?? null,
      } : null,
      creditAvailability: isCard ? {
        availableCredit: balances?.available_credit ?? null,
        creditLimit: balances?.credit_limit ?? null,
        currentBalance: balances?.current ?? null,
      } : null,
      balances: !isCard ? {
        available: balances?.available ?? null,
        current: balances?.current ?? null,
        ledger: balances?.ledger ?? null,
        pending: balances?.pending ?? null,
      } : null,
      aprAndFees: isCard ? {
        aprPurchase: cardMeta?.apr_purchase ?? null,
        aprCashAdvance: cardMeta?.apr_cash_advance ?? null,
        aprBalanceTransfer: cardMeta?.apr_balance_transfer ?? null,
        annualFee: cardMeta?.annual_fee ?? null,
        lateFee: cardMeta?.late_fee ?? null,
      } : null,
      transactions: transactions.map((t: any) => ({
        id: t.id, date: t.date, status: t.status,
        description: t.description, merchant: t.merchant?.name || null,
        amount: t.amount, currency: t.currency || account.currency,
      })),
      statements: statements.map((s: any) => ({
        id: s.id, periodStart: s.period_start, periodEnd: s.period_end,
        statementBalance: s.balance, dueDate: s.due_date ?? null,
        downloadAvailable: !!s.download_url,
      })),
      paymentsCapability: false, // set via separate capability check (see below)
    });
  } catch (e: any) {
    return res.status(500).json({ message: "Failed to load Teller account details", error: e?.message || e });
  }
});

/**
 * Alias route so existing /api/accounts/:flintId/details keeps working:
 * it maps Flint id -> Teller account id and reuses the same logic.
 */
r.get("/api/accounts/:id/details", ensureUser, async (req, res) => {
  const flintId = String(req.params.id);
  const tellerAccId = await getTellerAccountIdForFlintId(req.user.id, flintId);
  if (!tellerAccId) return res.status(404).json({ message: "No Teller account linked" });
  req.params.id = tellerAccId;
  return (r as any).handle(req, res); // reuse above handler
});

export default r;
This replaces the brokerage-style details for Teller credit cards: no trading, and you put Payment Due Date / Minimum Due / Statement Balance at the top.

