Goal: Fix SnapTrade signature 401 (code 1076: Unable to verify signature sent) on /api/snaptrade/register and make /api/holdings succeed.

1) Set correct secrets (same SnapTrade app, no quotes/spaces):

Open SnapTrade dashboard → pick one app and copy its creds.

Replit → Tools → Secrets:

SNAPTRADE_CLIENT_ID = <that app’s Client ID>

SNAPTRADE_CONSUMER_KEY = <that app’s Signing/Consumer Key>

SNAPTRADE_ENV = sandbox (use production only if truly prod)

SNAPTRADE_REDIRECT_URI = <exact redirect URI configured in SnapTrade app>

2) Ensure env loads before anything:
In the server entry file (index.ts or server.ts or app.js), at the top:

ts
Copy
Edit
import 'dotenv/config'; // or: require('dotenv').config();
3) Pin SDK + reinstall cleanly:

bash
Copy
Edit
npm i snaptrade-typescript-sdk@latest
rm -rf node_modules package-lock.json
npm i
4) Create single-source SnapTrade config:
Create src/lib/snaptrade.ts (or update it) exactly as:

ts
Copy
Edit
// src/lib/snaptrade.ts
import * as Snaptrade from 'snaptrade-typescript-sdk';

const env = process.env.SNAPTRADE_ENV || 'sandbox';
const clientId = process.env.SNAPTRADE_CLIENT_ID;
const consumerKey = process.env.SNAPTRADE_CONSUMER_KEY;

if (!clientId || !consumerKey) {
  console.error('[SnapTrade] Missing CLIENT_ID or CONSUMER_KEY');
}

console.log('[SnapTrade] SDK init', {
  env,
  clientIdTail: clientId?.slice(-6),
  consumerKeyLen: consumerKey?.length,
  sdkVersion: require('snaptrade-typescript-sdk/package.json').version,
});

export const snaptradeConfig = new Snaptrade.Configuration({
  consumerKey: consumerKey!,
  clientId: clientId!,
  environment: env as any, // 'sandbox' or 'production'
});

export const authApi = new Snaptrade.AuthenticationApi(snaptradeConfig);
export const accountsApi = new Snaptrade.AccountsApi(snaptradeConfig);
export const portfoliosApi = new Snaptrade.PortfolioApi(snaptradeConfig);
export const ordersApi = new Snaptrade.TradeApi(snaptradeConfig);
5) Use persistent userSecret and idempotent register route:
Add helper to generate secrets: src/lib/crypto.ts

ts
Copy
Edit
import { randomBytes } from 'crypto';
export const generateUserSecret = () => randomBytes(32).toString('hex');
Update /api/snaptrade/register route (e.g., src/routes/snaptrade.ts) to:

ts
Copy
Edit
import { Router } from 'express';
import { authApi } from '../lib/snaptrade';
import { generateUserSecret } from '../lib/crypto';
import { db } from '../lib/db'; // must provide getSnapUserByEmail / upsertSnapUserSecret

const r = Router();

r.post('/register', async (req, res) => {
  try {
    const userId = String(req.body.userEmail || '').toLowerCase();
    if (!userId) return res.status(400).json({ message: 'userEmail required' });

    let rec = await db.getSnapUserByEmail(userId);
    let userSecret = rec?.snaptrade_user_secret;
    if (!userSecret) {
      userSecret = generateUserSecret();
      await db.upsertSnapUserSecret(userId, userSecret);
    }

    await authApi.registerUser({ userId, userSecret }); // idempotent

    const connect = await authApi.createSnapTradeLogin({
      userId,
      userSecret,
      brokerRedirectUri: process.env.SNAPTRADE_REDIRECT_URI!,
    });

    return res.json({ connect });
  } catch (err: any) {
    console.error('SnapTrade Registration Error:', err?.responseBody || err?.message || err);
    return res.status(500).json({ message: err?.message || 'SnapTrade register failed' });
  }
});

export default r;
6) Fix holdings endpoint to always pass userId + userSecret:
src/routes/holdings.ts

ts
Copy
Edit
import { Router } from 'express';
import { accountsApi, portfoliosApi } from '../lib/snaptrade';
import { db } from '../lib/db';

const r = Router();

r.get('/', async (req, res) => {
  try {
    const userId = String(req.user?.email || req.query.userEmail || '').toLowerCase();
    if (!userId) return res.status(401).json({ message: 'No user' });

    const rec = await db.getSnapUserByEmail(userId);
    const userSecret = rec?.snaptrade_user_secret;
    if (!userSecret) return res.status(400).json({ message: 'SnapTrade not registered for user' });

    const accounts = await accountsApi.listAccounts({ userId, userSecret });

    const positions = await Promise.all(
      accounts.map(a =>
        portfoliosApi.getPositions({
          userId,
          userSecret,
          accountId: a.id!,
        })
      )
    );

    return res.json({ accounts, positions });
  } catch (err: any) {
    console.error('Error fetching holdings:', err?.responseBody || err?.message || err);
    return res.status(500).json({ message: 'Failed to fetch holdings' });
  }
});

export default r;
7) Add a canary health endpoint to prove signature correctness:
In your server (e.g., app.ts):

ts
Copy
Edit
app.get('/api/snaptrade/health', async (_req, res) => {
  try {
    const testUser = 'healthcheck@flint-investing.com';
    const testSecret = 'healthcheck-secret-1234567890';
    await authApi.registerUser({ userId: testUser, userSecret: testSecret });
    res.json({ ok: true });
  } catch (e: any) {
    console.error('Healthcheck error:', e?.responseBody || e?.message || e);
    res.status(500).json({ ok: false, error: e?.responseBody || e?.message });
  }
});
8) Restart server; verify boot log shows:

env: 'sandbox'

clientIdTail: ... (6 chars)

consumerKeyLen: ... (> 20)

sdkVersion: ...

9) Test sequence in browser/console:

GET /api/snaptrade/health → expect 200 { ok: true }
(if 401/1076 here, keys/env/redirect are mismatched; re-check step 1)

POST /api/snaptrade/register with body { "userEmail": "scapota@flint-investing.com" } → expect 200 and a Connect URL.

Complete SnapTrade Connect flow.

GET /api/holdings → expect 200 with accounts/positions.

10) If 1076 persists after all above:

In SnapTrade dashboard, rotate/regenerate the Consumer (Signing) Key for that same app.

Update SNAPTRADE_CONSUMER_KEY in Replit, restart, re-test /api/snaptrade/health.

11) Avoid cross-app userId collisions:

If this userId was previously registered under a different SnapTrade app, either delete it in that old app or test with a new email like scapota+test1@flint-investing.com.

Deliverables:

Updated files: src/lib/snaptrade.ts, src/lib/crypto.ts, src/routes/snaptrade.ts, src/routes/holdings.ts, server entry with dotenv/config, and a new /api/snaptrade/health route.

Show me the boot log [SnapTrade] SDK init ... and responses from the three tests above.









Ask ChatGPT
